tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
plot(Age, LungCap, main="Relation", las=1)
LungCapData2 <- read.csv("C:/Users/benab/OneDrive - iitkgp.ac.in/Desktop/Sem 6/SL Lab/Lab 7/LungCapData2.csv")
head(LungCapData2)
View(LungCapData2)
summary(LungCapData2)
attach(LungCapData2)
plot(Age, LungCap, main="Relation", las=1)
model1 <- lm(LungCap ~ Age)
summary(model1)
lines(smooth.spline(Age, predict(model1)), col="yellow", lwd=3)
#pred_values
##Fitting a polynomial regression model with degree 2
model2 <- lm(LungCap ~ Age + I(Age^2))
summary(model2)
lines(smooth.spline(Age, predict(model2)), col="blue", lwd=3)
##Fitting a polynomial regression model with degree 3
model3 <- lm(LungCap ~ Age + I(Age^2) +I(Age^3))
summary(model3)
lines(smooth.spline(Age, predict(model3)), col="red", lwd=3)
source("C:/Users/benab/OneDrive - iitkgp.ac.in/Desktop/Sem 6/SL Lab/Lab 7/classwork.R")
source("C:/Users/benab/OneDrive - iitkgp.ac.in/Desktop/Sem 6/SL Lab/Lab 7/classwork.R")
legend("topleft", legend =c("Degree 2","Degree 3", "Degree 4"),fill=c("yellow", "blue", "red", "green") )
model4 <- lm(LungCap ~ poly(Age, degree = 4, raw=1))
summary(model4)
lines(smooth.spline(Age, predict(model4)), col="green", lwd=3)
legend("topleft", legend =c("Degree 2","Degree 3", "Degree 4"),fill=c("yellow", "blue", "red", "green") )
legend("topleft", legend =c("Degree 2","Degree 3", "Degree 4"),fill=c( "blue", "red", "green") )
# Testing for degree 100
model5 <- lm(LungCap ~ poly(Age, degree = 100, raw=1))
summary(model5)
lines(smooth.spline(Age, predict(model5)), col="purple", lwd=3)
legend("topleft", legend =c("Degree 2","Degree 3", "Degree 4", "Degree 100"),fill=c( "blue", "red", "green","purple") )
anova(model1 model2)
anova(model1,model2)
anova(model1,model5)
legend("topleft", legend =c("Degree 1", "Degree 2","Degree 3", "Degree 4", "Degree 100"),fill=c( "yellow","blue", "red", "green","purple") )
legend("topleft", legend =c("Degree 1", "Degree 2","Degree 3", "Degree 4", "Degree 100"),
fill=c( "yellow","blue", "red", "green","purple") ,
cex = 0.75)
LungCapData2 <- read.csv("C:/Users/benab/OneDrive - iitkgp.ac.in/Desktop/Sem 6/SL Lab/Lab 7/LungCapData2.csv")
head(LungCapData2)
View(LungCapData2)
summary(LungCapData2)
attach(LungCapData2)
plot(Age, LungCap, main="Relation", las=1)
model1 <- lm(LungCap ~ Age)
summary(model1)
lines(smooth.spline(Age, predict(model1)), col="yellow", lwd=3)
#pred_values
##Fitting a polynomial regression model with degree 2
model2 <- lm(LungCap ~ Age + I(Age^2))
summary(model2)
lines(smooth.spline(Age, predict(model2)), col="blue", lwd=3)
##Fitting a polynomial regression model with degree 3
model3 <- lm(LungCap ~ Age + I(Age^2) +I(Age^3))
summary(model3)
lines(smooth.spline(Age, predict(model3)), col="red", lwd=3)
model4 <- lm(LungCap ~ poly(Age, degree = 4, raw=1))
summary(model4)
lines(smooth.spline(Age, predict(model4)), col="green", lwd=3)
# Testing for degree 100
model5 <- lm(LungCap ~ poly(Age, degree = 100, raw=1))
summary(model5)
lines(smooth.spline(Age, predict(model5)), col="purple", lwd=3)
legend("topleft", legend =c("Degree 1", "Degree 2","Degree 3", "Degree 4", "Degree 100"),
fill=c( "yellow","blue", "red", "green","purple") ,
cex = 0.65)
# Checking if increasing the polynomial degree effectively explains the variance
# Anova for model 1 and model 2
anova(model1,model2)
# Anova for model 1 and model 5
anova(model1,model5)
library(ISLR)
library(dplyr)
library(ggplot2)
library(splines)
library(ISLR)
library(dplyr)
library(ggplot2)
library(splines)
LungCapData2 <- read.csv("C:/Users/benab/OneDrive - iitkgp.ac.in/Desktop/Sem 6/SL Lab/Lab 7/LungCapData2.csv")
head(LungCapData2)
# View(LungCapData2)
summary(LungCapData2)
attach(LungCapData2)
plot(Age, LungCap, main="Relation", las=1)
model1 <- lm(LungCap ~ Age)
summary(model1)
lines(smooth.spline(Age, predict(model1)), col="yellow", lwd=3)
#pred_values
##Fitting a polynomial regression model with degree 2
model2 <- lm(LungCap ~ Age + I(Age^2))
summary(model2)
lines(smooth.spline(Age, predict(model2)), col="blue", lwd=3)
##Fitting a polynomial regression model with degree 3
model3 <- lm(LungCap ~ Age + I(Age^2) +I(Age^3))
summary(model3)
lines(smooth.spline(Age, predict(model3)), col="red", lwd=3)
model4 <- lm(LungCap ~ poly(Age, degree = 4, raw=1))
summary(model4)
lines(smooth.spline(Age, predict(model4)), col="green", lwd=3)
# Testing for degree 100
model5 <- lm(LungCap ~ poly(Age, degree = 100, raw=1))
summary(model5)
lines(smooth.spline(Age, predict(model5)), col="purple", lwd=3)
legend("topleft", legend =c("Degree 1", "Degree 2","Degree 3", "Degree 4", "Degree 100"),
fill=c( "yellow","blue", "red", "green","purple") ,
cex = 0.65)
# Checking if increasing the polynomial degree effectively explains the variance
# Anova for model 1 and model 2
anova(model1,model2)
# Anova for model 1 and model 5
anova(model1,model5)
library(ISLR)
library(dplyr)
library(ggplot2)
library(splines)
LungCapData2 <- read.csv("C:/Users/benab/OneDrive - iitkgp.ac.in/Desktop/Sem 6/SL Lab/Lab 7/LungCapData2.csv")
LungCapData2 <- read.csv("C:/Users/benab/OneDrive - iitkgp.ac.in/Desktop/Sem 6/SL Lab/Lab 7/LungCapData2.csv")
# Plot the data
plot(LungCapData2$Age, LungCapData2$LungCap, col = "gray",
xlab = "Age", ylab = "LungCap", main = "Piecewise Polynomial Regression at Knot")
# Define the knot
knot <- 12
# Plot the data
plot(LungCapData2$Age, LungCapData2$LungCap, col = "gray",
xlab = "Age", ylab = "LungCap", main = "Piecewise Polynomial Regression (Disjoint at Knot)")
# Split the data into two subsets
data_before_knot <- subset(LungCapData2, Age < knot)
data_after_knot <- subset(LungCapData2, Age >= knot)
range(LungCapData2$Age)
data_before_knot
# Fit a cubic polynomial for Age < 12
model_before <- lm(LungCap ~ poly(Age, degree = 3, raw = TRUE), data = data_before_knot)
# Fit a cubic polynomial for Age >= 12
model_after <- lm(LungCap ~ poly(Age, degree = 3, raw = TRUE), data = data_after_knot)
# Generate Age values for prediction (before and after the knot)
age_before <- seq(min(LungCapData2$Age), knot, length.out = 100)
age_after <- seq(knot, max(LungCapData2$Age), length.out = 100)
# Predict LungCap for the Age values before and after the knot
pred_before <- predict(model_before, newdata = list(Age = age_before))
pred_after <- predict(model_after, newdata = list(Age = age_after))
# Add the curve for Age < 12
lines(age_before, pred_before, col = "red", lwd = 2)
# Add the curve for Age >= 12
lines(age_after, pred_after, col = "blue", lwd = 2)
# Add a vertical line at the knot
abline( v =knot, col="black", lty=2)
# Add a legend
legend("topleft", legend = c("Age < 12", "Age >= 12", "knot at Age = 12"),
col = c("red", "blue", "black"), lty = c(1, 1, 2), lwd = 2)
# Add a legend
legend("topleft", legend = c("Age < 12", "Age >= 12", "knot at Age = 12"),
col = c("red", "blue", "black"), lty = c(1, 1, 2), lwd = 2, cex=0.65)
# Plot the data
plot(LungCapData2$Age, LungCapData2$LungCap, col = "gray",
xlab = "Age", ylab = "LungCap", main = "Piecewise Polynomial Regression (Disjoint at Knot)")
range(LungCapData2$Age)
# Define the knot
knot <- 12
# Split the data into two subsets
data_before_knot <- subset(LungCapData2, Age < knot)
data_after_knot <- subset(LungCapData2, Age >= knot)
# Fit a cubic polynomial for Age < 12
model_before <- lm(LungCap ~ poly(Age, degree = 3, raw = TRUE), data = data_before_knot)
# Fit a cubic polynomial for Age >= 12
model_after <- lm(LungCap ~ poly(Age, degree = 3, raw = TRUE), data = data_after_knot)
# Generate Age values for prediction (before and after the knot)
age_before <- seq(min(LungCapData2$Age), knot, length.out = 100)
age_after <- seq(knot, max(LungCapData2$Age), length.out = 100)
# Predict LungCap for the Age values before and after the knot
pred_before <- predict(model_before, newdata = list(Age = age_before))
pred_after <- predict(model_after, newdata = list(Age = age_after))
# Add the curve for Age < 12
lines(age_before, pred_before, col = "red", lwd = 2)
# Add the curve for Age >= 12
lines(age_after, pred_after, col = "blue", lwd = 2)
# Add a vertical line at the knot
abline( v =knot, col="black", lty=2)
# Add a legend
legend("topleft", legend = c("Age < 12", "Age >= 12", "knot at Age = 12"),
col = c("red", "blue", "black"), lty = c(1, 1, 2), lwd = 2, cex=0.65)
# Fit a cubic spline with a knot at Age = 12
library(splines)
model_spline <- lm(LungCap ~ bs(Age, knots = knot, degree = 3), data = LungCapData2)
# Generate a sequence of Age values for prediction
age_grid <- seq(min(LungCapData2$Age), max(LungCapData2$Age), length.out = 100)
# Generate predictions for the splin
pred_spline <- predict(model_spline, newdata =list(Age= age_grid))
# Generate predictions for the spline
pred_spline <- predict(model_spline, newdata =list(Age= age_grid))
# Add the spline curve to the plot
lines(age_grid, pred_spline, col = "green", lwd = 2)
# Update the legend
legend("topleft",
legend = c("Age < 15", "Age >= 15", "Cubic Spline", "Knot at Age = 15"),
col = c("red", "blue", "green", "black"),
lty = c(1, 1, 1, 2),
lwd = 2)
# Update the legend
legend("topleft",
legend = c("Age < 15", "Age >= 15", "Cubic Spline", "Knot at Age = 15"),
col = c("red", "blue", "green", "black"),
lty = c(1, 1, 1, 2),
lwd = 2,
cex=0.65)
library(ISLR)
library(dplyr)
library(ggplot2)
library(splines)
LungCapData2 <- read.csv("C:/Users/benab/OneDrive - iitkgp.ac.in/Desktop/Sem 6/SL Lab/Lab 7/LungCapData2.csv")
# Plot the data
plot(LungCapData2$Age, LungCapData2$LungCap, col = "gray",
xlab = "Age", ylab = "LungCap", main = "Piecewise Polynomial Regression (Disjoint at Knot)")
range(LungCapData2$Age)
# Define the knot
knot <- 12
# Split the data into two subsets
data_before_knot <- subset(LungCapData2, Age < knot)
data_after_knot <- subset(LungCapData2, Age >= knot)
# Fit a cubic polynomial for Age < 12
model_before <- lm(LungCap ~ poly(Age, degree = 3, raw = TRUE), data = data_before_knot)
# Fit a cubic polynomial for Age >= 12
model_after <- lm(LungCap ~ poly(Age, degree = 3, raw = TRUE), data = data_after_knot)
# Generate Age values for prediction (before and after the knot)
age_before <- seq(min(LungCapData2$Age), knot, length.out = 100)
age_after <- seq(knot, max(LungCapData2$Age), length.out = 100)
# Predict LungCap for the Age values before and after the knot
pred_before <- predict(model_before, newdata = list(Age = age_before))
pred_after <- predict(model_after, newdata = list(Age = age_after))
# Add the curve for Age < 12
lines(age_before, pred_before, col = "red", lwd = 2)
# Add the curve for Age >= 12
lines(age_after, pred_after, col = "blue", lwd = 2)
# Add a vertical line at the knot
abline( v = knot, col="black", lty=2)
# Add a legend
legend("topleft", legend = c("Age < 12", "Age >= 12", "knot at Age = 12"),
col = c("red", "blue", "black"), lty = c(1, 1, 2), lwd = 2, cex=0.65)
# Fit a cubic spline with a knot at Age = 12
library(splines)
model_spline <- lm(LungCap ~ bs(Age, knots = knot, degree = 3), data = LungCapData2)
# Generate a sequence of Age values for prediction
age_grid <- seq(min(LungCapData2$Age), max(LungCapData2$Age), length.out = 100)
# Generate predictions for the spline
pred_spline <- predict(model_spline, newdata =list(Age= age_grid))
# Add the spline curve to the plot
lines(age_grid, pred_spline, col = "green", lwd = 2)
# Update the legend
legend("topleft",
legend = c("Age < 15", "Age >= 15", "Cubic Spline", "Knot at Age = 15"),
col = c("red", "blue", "green", "black"),
lty = c(1, 1, 1, 2),
lwd = 2,
cex=0.65)
# Update the legend
legend("topleft",
legend = c("Age < 12", "Age >= 12", "Cubic Spline", "Knot at Age = 12"),
col = c("red", "blue", "green", "black"),
lty = c(1, 1, 1, 2),
lwd = 2,
cex=0.65, cey=0.5)
# Update the legend
legend("topleft",
legend = c("Age < 12", "Age >= 12", "Cubic Spline", "Knot at Age = 12"),
col = c("red", "blue", "green", "black"),
lty = c(1, 1, 1, 2),
lwd = 2,
cex=0.65)
# Fit a regression spline using basis functions
fit <- lm(LungCap ~ bs(Age, knots = c(5, 10, 15)), data = LungCapData2)
summary(fit)
# Generate a sequence of Age values for prediction
# Get min/max values of Age using the range() function
agelims <- LungCapData2 %>%
select(Age) %>%
range
# Generate a sequence of Age values for prediction
age_grid = seq(from = min(agelims), to = max(agelims), length.out = 100)
# Ensure correct column name in newdata
pred = predict(fit, newdata = data.frame(Age = age_grid), se = TRUE)
agelims
# Generate a sequence of Age values for prediction
age_grid = seq(from = min(agelims), to = max(agelims), length.out = 100)
# Ensure correct column name in new data
pred = predict(fit, newdata = data.frame(Age = age_grid), se = TRUE)
# Compute error bands correctly
se_bands = with(pred, cbind("upper" = fit + 2 * se.fit,
"lower" = fit - 2 * se.fit))
# Create a data frame for plotting
plot_data <- data.frame(
Age = age_grid,
Fit = pred$fit,
Lower = se_bands[, "lower"],
Upper = se_bands[, "upper"]
)
# Plot the spline and error bands
ggplot() +
geom_point(data = LungCapData2, aes(x = Age, y = LungCap)) +
geom_line(data = plot_data, aes(x = Age, y = Fit), color = "blue") +
geom_ribbon(data = plot_data, aes(x = Age, ymin = Lower, ymax = Upper), alpha = 0.3) +
xlim(range(LungCapData2$Age))
# GAM (Generalized Additive Models)
library(mgcv)
attach(LungCapData2)
# GAM (Generalized Additive Models)
library(mgcv)
attach(LungCapData2)
head(LungCapData2)
gam1 = gam(LungCap ~ s(Age, k = 4), data = LungCapData2)
summary(gam1)
gam2 = gam(LungCap ~ s(Age, k = 4) + s(Height, k = 4), data = LungCapData2)
summary(gam2)
par(mfrow = c(1, 2))
plot(gam2, se = TRUE, col = "blue")
anova(gam1, gam2, test = "F")
LungCapData2 <- read.csv("C:/Users/benab/OneDrive - iitkgp.ac.in/Desktop/Sem 6/SL Lab/Lab 7/LungCapData2.csv")
head(LungCapData2)
min(LungCapData2$Age)
max(LungCapData2$Age)
library(ISLR)
# Load the Wage dataset
data(Wage)
View(Wage)
min(Wage$age)
max(Wage$age)
# Create age categories (step function bins)
LungCapData2$age_cat <- cut(LungCapData2$Age, breaks = c(0, 5, 10, 15, 20))
View(LungCapData2)
# Fit a linear regression model with age categories
model <- lm(LungCap ~ age_cat, data = LungCapData2)
# Summarize the model
summary(model)
#Alternative Step Function
table(cut(LungCapData2$Age,4))
fit_step = lm(LungCap~cut(Age,4), data = LungCapData2)
print(coef(summary(fit_step)))
# Predict the value of the generated ages, returning the standard error using se = TRUE
# Get min/max values of age using the range() function
library(dplyr)
agelims <- LungCapData2 %>%
select(Age) %>%
range()
age_grid = seq(from = min(agelims), to = max(agelims))
preds = predict(fit_step, newdata = list(Age = age_grid), se = TRUE)
# Compute error bands (2*SE)
se_bands = cbind("upper" = preds$fit+2*preds$se.fit,
"lower" = preds$fit-2*preds$se.fit)
# Plot
library(ggplot2)
ggplot() +
geom_point(data = LungCapData2, aes(x = Age, y = LungCap)) +
geom_line(aes(x = age_grid, y = preds$fit), color = "red") +
geom_ribbon(aes(x = age_grid,
ymin = se_bands[,"lower"],
ymax = se_bands[,"upper"]),
alpha = 0.3) +
xlim(agelims) +
labs(title = "Step Function")
